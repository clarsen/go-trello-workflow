scalar Timestamp

type BoardList {
  board: String!
  list: String!
}

type Task {
  id: String!
  title: String!
  createdDate: Timestamp
  url: String
  due: Timestamp
  list: BoardList
  period: String
}

input BoardListInput {
  board: String!
  list: String!
}

type WeeklyGoal {
  title: String!
  tasks: [Task]
  year: Int
  month: Int
  week: Int
}

type MonthlyGoal {
  title: String!
  weeklyGoals: [WeeklyGoal]
}

type Query {
  tasks(dueBefore: Int, inBoardList: BoardListInput): [Task!]
  weeklyVisualization: String
  monthlyGoals: [MonthlyGoal]
}

type GenerateResult {
  message: String
  ok: Boolean!
}

type Mutation {
  prepareWeeklyReview(year: Int, week: Int): GenerateResult!
  finishWeeklyReview(year: Int, week: Int): Boolean
  setDueDate(taskID: String!, due: Timestamp!): Task!
  setDone(taskID: String!, done: Boolean!, status: String, nextDue: Timestamp): Task!

}
